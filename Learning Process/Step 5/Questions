Awesome! You're now entering one of the most critical and useful phases of coding â€” **Step 5: O(n) Problem Solving on Arrays and Strings**.
This will build the foundation for **DSA, interviews, and real-world logic**.

---

## âœ… **Step 5: O(n) Problems on Arrays & Strings**

In this step, youâ€™ll master how to:

* Traverse arrays and strings
* Track frequencies, max/min
* Manipulate character and word-level data
* Solve linear-time problems using a single loop

---

### ðŸ”¹ **What Youâ€™ll Learn**

| Concept               | Why Itâ€™s Useful                          |
| --------------------- | ---------------------------------------- |
| Array traversal       | Basic structure for DSA                  |
| String iteration      | Validation, formatting, analysis         |
| Frequency count       | Used in maps, counting problems          |
| Sliding window basics | Efficient substring/array checks         |
| Two-pointer concept   | Optimized traversal (optional in Step 5) |

---

## ðŸŸ¢ **Array-Based Problems (O(n))**

---

### ðŸ”¸ Q1. Find Maximum and Minimum Element

Input: `[5, 2, 9, 1, 6]` â†’ Output: `Max = 9, Min = 1`

---

### ðŸ”¸ Q2. Calculate Sum and Average of Array

Input: `[2, 4, 6, 8]` â†’ Output: `Sum = 20, Avg = 5.0`

---

### ðŸ”¸ Q3. Count Even and Odd Elements

Input: `[1, 2, 3, 4]` â†’ Output: `Even = 2, Odd = 2`

---

### ðŸ”¸ Q4. Search for an Element (Linear Search)

Input: `[3, 5, 7], Search = 5` â†’ Output: `Found at index 1`

---

### ðŸ”¸ Q5. Reverse an Array (in-place)

Input: `[1, 2, 3]` â†’ Output: `[3, 2, 1]`

---

### ðŸ”¸ Q6. Remove Duplicates from Array (preserve first occurrences)

---

### ðŸ”¸ Q7. Find Second Largest Element

Input: `[5, 3, 9, 1]` â†’ Output: `Second Largest = 5`

---

### ðŸ”¸ Q8. Left Rotate the Array by 1

Input: `[1, 2, 3]` â†’ Output: `[2, 3, 1]`
---

### ðŸ”¸ Q9. Check if Array is Sorted (Ascending)

---

### ðŸ”¸ Q10. Find the Frequency of Each Element

Input: `[2, 3, 2, 4, 3]`
Output:

```
2 â†’ 2 times  
3 â†’ 2 times  
4 â†’ 1 time
```

---

## ðŸ”µ **String-Based Problems (O(n))**

---

### ðŸ”¸ Q11. Count Vowels and Consonants

Input: `"hello"` â†’ Output: `V = 2, C = 3`

---

### ðŸ”¸ Q12. Convert to Uppercase / Lowercase (manually)

---

### ðŸ”¸ Q13. Check for Palindrome String

Input: `"madam"` â†’ Output: `Palindrome = true`

---

### ðŸ”¸ Q14. Count Frequency of Characters

Input: `"apple"` â†’ Output:

```
a: 1  
p: 2  
l: 1  
e: 1
```

---

### ðŸ”¸ Q15. Remove Spaces from a String

Input: `"I am Nithish"` â†’ Output: `"IamNithish"`

---

### ðŸ”¸ Q16. Reverse a String (manual)

---

### ðŸ”¸ Q17. Count Words in a Sentence

Input: `"Hi there, Iâ€™m Nithish"` â†’ Output: `4`

---

### ðŸ”¸ Q18. Find the Longest Word in a Sentence

---

### ðŸ”¸ Q19. Replace All Occurrences of a Character

Input: `"banana", replace a â†’ x` â†’ Output: `"bxnxnx"`

---

### ðŸ”¸ Q20. Count Digits, Letters, Special Characters

Input: `"abc@123!"`
Output:

```
Letters: 3  
Digits: 3  
Special: 2
```

---

## ðŸ§  Optional: Advanced Thinking

* Use frequency array or hash map
* Use string builder / join for clean output
* Compare strings char-by-char
* Two-pointer tricks for removing duplicates

---

## âœ… Want a Tracker Like This?

| Problem No. | Type   | Done | Notes |
| ----------- | ------ | ---- | ----- |
| 1           | Array  |      |       |
| 11          | String |      |       |

---